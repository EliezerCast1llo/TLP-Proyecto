{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nvar _gojs = _interopRequireDefault(require(\"gojs\"));\n\nvar $ = _gojs[\"default\"].GraphObject.make;\n\nfunction linkTemplate() {\n  var template = $(_gojs[\"default\"].Link, // the whole link panel\n  {\n    routing: _gojs[\"default\"].Link.AvoidsNodes,\n    curve: _gojs[\"default\"].Link.JumpOver,\n    corner: 5,\n    toShortLength: 4,\n    relinkableFrom: true,\n    relinkableTo: true,\n    reshapable: true,\n    resegmentable: true,\n    selectionAdorned: false\n  }, new _gojs[\"default\"].Binding(\"points\").makeTwoWay(), $(_gojs[\"default\"].Shape, // the highlight shape, normally transparent\n  {\n    isPanelMain: true,\n    strokeWidth: 8,\n    stroke: \"transparent\",\n    name: \"HIGHLIGHT\"\n  }), $(_gojs[\"default\"].Shape, // the link path shape\n  {\n    isPanelMain: true,\n    stroke: \"gray\",\n    strokeWidth: 2\n  }, new _gojs[\"default\"].Binding(\"stroke\", \"isSelected\", function (sel) {\n    return sel ? \"dodgerblue\" : \"gray\";\n  }).ofObject()), $(_gojs[\"default\"].Shape, // the arrowhead\n  {\n    toArrow: \"standard\",\n    strokeWidth: 0,\n    fill: \"gray\"\n  }), $(_gojs[\"default\"].Panel, \"Auto\", // the link label, normally not visible\n  {\n    visible: false,\n    name: \"LABEL\",\n    segmentIndex: 2,\n    segmentFraction: 0.5\n  }, new _gojs[\"default\"].Binding(\"visible\", \"visible\").makeTwoWay(), $(_gojs[\"default\"].Shape, \"RoundedRectangle\", // the label shape\n  {\n    fill: \"#F8F8F8\",\n    strokeWidth: 0\n  }), $(_gojs[\"default\"].TextBlock, \"Yes\", // the label\n  {\n    textAlign: \"center\",\n    font: \"10pt helvetica, arial, sans-serif\",\n    stroke: \"#333333\",\n    editable: true\n  }, new _gojs[\"default\"].Binding(\"text\").makeTwoWay())));\n  return template;\n}\n\nfunction makePort(name, align, spot, output, input) {\n  var horizontal = align.equals(_gojs[\"default\"].Spot.Top) || align.equals(_gojs[\"default\"].Spot.Bottom); // the port is basically just a transparent rectangle that stretches along the side of the node,\n  // and becomes colored when the mouse passes over it\n\n  return $(_gojs[\"default\"].Shape, {\n    fill: \"transparent\",\n    // changed to a color in the mouseEnter event handler\n    strokeWidth: 0,\n    // no stroke\n    width: horizontal ? NaN : 8,\n    // if not stretching horizontally, just 8 wide\n    height: !horizontal ? NaN : 8,\n    // if not stretching vertically, just 8 tall\n    alignment: align,\n    // align the port on the main Shape\n    stretch: horizontal ? _gojs[\"default\"].GraphObject.Horizontal : _gojs[\"default\"].GraphObject.Vertical,\n    portId: name,\n    // declare this object to be a \"port\"\n    fromSpot: spot,\n    // declare where links may connect at this port\n    fromLinkable: output,\n    // declare whether the user may draw links from here\n    toSpot: spot,\n    // declare where links may connect at this port\n    toLinkable: input,\n    // declare whether the user may draw links to here\n    cursor: \"pointer\",\n    // show a different cursor to indicate potential link point\n    mouseEnter: function mouseEnter(e, port) {\n      // the PORT argument will be this Shape\n      if (!e.diagram.isReadOnly) port.fill = \"#00abe469\";\n    },\n    mouseLeave: function mouseLeave(e, port) {\n      port.fill = \"transparent\";\n    }\n  });\n}\n\nmodule.exports = {\n  linkTemplate: linkTemplate,\n  makePort: makePort\n};","map":{"version":3,"sources":["C:/Users/LENOVO/Documents/teoria/Views/pages/Components/functionsDfd.js"],"names":["$","go","GraphObject","make","linkTemplate","template","Link","routing","AvoidsNodes","curve","JumpOver","corner","toShortLength","relinkableFrom","relinkableTo","reshapable","resegmentable","selectionAdorned","Binding","makeTwoWay","Shape","isPanelMain","strokeWidth","stroke","name","sel","ofObject","toArrow","fill","Panel","visible","segmentIndex","segmentFraction","TextBlock","textAlign","font","editable","makePort","align","spot","output","input","horizontal","equals","Spot","Top","Bottom","width","NaN","height","alignment","stretch","Horizontal","Vertical","portId","fromSpot","fromLinkable","toSpot","toLinkable","cursor","mouseEnter","e","port","diagram","isReadOnly","mouseLeave","module","exports"],"mappings":"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","sourcesContent":["import go from 'gojs';\r\nconst $ = go.GraphObject.make;\r\n\r\nfunction linkTemplate() {\r\n    let template = $(go.Link, // the whole link panel\r\n        {\r\n            routing: go.Link.AvoidsNodes,\r\n            curve: go.Link.JumpOver,\r\n            corner: 5,\r\n            toShortLength: 4,\r\n            relinkableFrom: true, relinkableTo: true,\r\n            reshapable: true,\r\n            resegmentable: true,\r\n            selectionAdorned: false\r\n        },\r\n        new go.Binding(\"points\").makeTwoWay(),\r\n        $(go.Shape, // the highlight shape, normally transparent\r\n            {\r\n                isPanelMain: true,\r\n                strokeWidth: 8,\r\n                stroke: \"transparent\",\r\n\r\n                name: \"HIGHLIGHT\"\r\n            }),\r\n        $(go.Shape, // the link path shape\r\n            {\r\n                isPanelMain: true,\r\n                stroke: \"gray\",\r\n\r\n                strokeWidth: 2\r\n            },\r\n            new go.Binding(\"stroke\", \"isSelected\", function (sel) {\r\n                return sel ? \"dodgerblue\" : \"gray\";\r\n            }).ofObject()),\r\n        $(go.Shape, // the arrowhead\r\n            {\r\n                toArrow: \"standard\",\r\n                strokeWidth: 0,\r\n\r\n                fill: \"gray\"\r\n            }),\r\n        $(go.Panel, \"Auto\", // the link label, normally not visible\r\n            {\r\n                visible: false,\r\n                name: \"LABEL\",\r\n                segmentIndex: 2,\r\n                segmentFraction: 0.5\r\n            },\r\n            new go.Binding(\"visible\", \"visible\").makeTwoWay(),\r\n            $(go.Shape, \"RoundedRectangle\", // the label shape\r\n                {\r\n                    fill: \"#F8F8F8\",\r\n                    strokeWidth: 0\r\n                }),\r\n            $(go.TextBlock, \"Yes\", // the label\r\n                {\r\n                    textAlign: \"center\",\r\n                    font: \"10pt helvetica, arial, sans-serif\",\r\n                    stroke: \"#333333\",\r\n                    editable: true\r\n                },\r\n                new go.Binding(\"text\").makeTwoWay())\r\n        )\r\n    );\r\n    return template;\r\n}\r\n\r\nfunction makePort(name, align, spot, output, input) {\r\n    var horizontal = align.equals(go.Spot.Top) || align.equals(go.Spot.Bottom);\r\n    // the port is basically just a transparent rectangle that stretches along the side of the node,\r\n    // and becomes colored when the mouse passes over it\r\n    return $(go.Shape, {\r\n        fill: \"transparent\", // changed to a color in the mouseEnter event handler\r\n        strokeWidth: 0, // no stroke\r\n        width: horizontal ? NaN : 8, // if not stretching horizontally, just 8 wide\r\n        height: !horizontal ? NaN : 8, // if not stretching vertically, just 8 tall\r\n        alignment: align, // align the port on the main Shape\r\n        stretch: (horizontal ? go.GraphObject.Horizontal : go.GraphObject.Vertical),\r\n        portId: name, // declare this object to be a \"port\"\r\n        fromSpot: spot, // declare where links may connect at this port\r\n        fromLinkable: output, // declare whether the user may draw links from here\r\n        toSpot: spot, // declare where links may connect at this port\r\n        toLinkable: input, // declare whether the user may draw links to here\r\n        cursor: \"pointer\", // show a different cursor to indicate potential link point\r\n\r\n        mouseEnter: function (e, port) { // the PORT argument will be this Shape\r\n            if (!e.diagram.isReadOnly) port.fill = \"#00abe469\";\r\n        },\r\n        mouseLeave: function (e, port) {\r\n            port.fill = \"transparent\";\r\n        }\r\n    });\r\n}\r\n\r\nmodule.exports = { linkTemplate, makePort }"]},"metadata":{},"sourceType":"script"}