{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport go from 'gojs'; //import './App.css';\n\nimport './figure';\nimport dataModels from './modelsDfg';\nconst $ = go.GraphObject.make;\nvar myDiagram;\nexport default class GoJs extends Component {\n  constructor(props) {\n    super(props);\n    this.renderCanvas = this.renderCanvas.bind(this);\n    this.state = {\n      myModel: null,\n      myDiagram: null\n    };\n  }\n\n  renderCanvas() {\n    myDiagram = $(go.Diagram, this.refs.goJsDiv, {\n      \"LinkDrawn\": this.showLinkLabel,\n      // this DiagramEvent listener is defined below\n      \"LinkRelinked\": this.showLinkLabel,\n      \"toolManager.mouseWheelBehavior\": go.ToolManager.WheelZoom,\n      \"draggingTool.isGridSnapEnabled\": true,\n      \"undoManager.isEnabled\": true // enable undo & redo\n\n    }); // define the Node templates for regular nodes\n\n    myDiagram.nodeTemplateMap.add(\"\", // the default category\n    $(go.Node, \"Table\", this.nodeStyle(), // the main object is a Panel that surrounds a TextBlock with a rectangular Shape\n    $(go.Panel, \"Auto\", $(go.Shape, \"Rectangle\", new go.Binding(\"fill\", \"color\"), {\n      fill: \"#00A9C9\",\n      strokeWidth: 0,\n      portId: \"\",\n      fromLinkable: true,\n      toLinkable: true\n    }, new go.Binding(\"figure\", \"figure\")), $(go.TextBlock, this.textStyle(), {\n      margin: 8,\n      maxSize: new go.Size(160, NaN),\n      wrap: go.TextBlock.WrapFit,\n      editable: true\n    }, new go.Binding(\"text\").makeTwoWay())), // four named ports, one on each side:\n    this.makePort(\"T\", go.Spot.Top, go.Spot.TopSide, false, true), this.makePort(\"L\", go.Spot.Left, go.Spot.LeftSide, true, true), this.makePort(\"R\", go.Spot.Right, go.Spot.RightSide, true, true), this.makePort(\"B\", go.Spot.Bottom, go.Spot.BottomSide, true, false)));\n    myDiagram.nodeTemplateMap.add(\"Conditional\", $(go.Node, \"Table\", this.nodeStyle(), // the main object is a Panel that surrounds a TextBlock with a rectangular Shape\n    $(go.Panel, \"Auto\", $(go.Shape, \"Diamond\", {\n      fill: \"#00A9C9\",\n      strokeWidth: 0,\n      portId: \"\",\n      fromLinkable: true,\n      toLinkable: true\n    }, new go.Binding(\"figure\", \"figure\")), $(go.TextBlock, this.textStyle(), {\n      margin: 8,\n      maxSize: new go.Size(160, NaN),\n      wrap: go.TextBlock.WrapFit,\n      editable: true\n    }, new go.Binding(\"text\").makeTwoWay())), // four named ports, one on each side:\n    this.makePort(\"T\", go.Spot.Top, go.Spot.Top, false, true), this.makePort(\"L\", go.Spot.Left, go.Spot.Left, true, true), this.makePort(\"R\", go.Spot.Right, go.Spot.Right, true, true), this.makePort(\"B\", go.Spot.Bottom, go.Spot.Bottom, true, false)));\n    myDiagram.nodeTemplateMap.add(\"Start\", $(go.Node, \"Table\", this.nodeStyle(), $(go.Panel, \"Auto\", $(go.Shape, \"Circle\", new go.Binding(\"fill\", \"color\"), {\n      minSize: new go.Size(40, 40),\n      strokeWidth: 0,\n      portId: \"\",\n      fromLinkable: true,\n      toLinkable: true\n    }), $(go.TextBlock, \"Start\", this.textStyle(), new go.Binding(\"text\"))), // three named ports, one on each side except the top, all output only:\n\n    /* this.makePort(\"L\", go.Spot.Left, go.Spot.Left, true, false),\n     this.makePort(\"R\", go.Spot.Right, go.Spot.Right, true, false),*/\n    this.makePort(\"B\", go.Spot.Bottom, go.Spot.Bottom, true, false)));\n    myDiagram.nodeTemplateMap.add(\"Var\", $(go.Node, \"Table\", this.nodeStyle(), $(go.Panel, \"Auto\", $(go.Shape, \"square\", new go.Binding(\"fill\", \"color\"), {\n      minSize: new go.Size(40, 40),\n      strokeWidth: 0,\n      portId: \"\",\n      fromLinkable: true,\n      toLinkable: true\n    }), $(go.TextBlock, this.textStyle(), {\n      editable: true\n    }, new go.Binding(\"text\"))), // three named ports, one on each side except the top, all output only:\n    this.makePort(\"T\", go.Spot.Top, go.Spot.TopSide, false, true), this.makePort(\"L\", go.Spot.Left, go.Spot.LeftSide, true, true), this.makePort(\"R\", go.Spot.Right, go.Spot.RightSide, true, true), this.makePort(\"B\", go.Spot.Bottom, go.Spot.BottomSide, true, false)));\n    myDiagram.nodeTemplateMap.add(\"If\", $(go.Node, \"Table\", this.nodeStyle(), $(go.Panel, \"Auto\", $(go.Shape, \"RightTriangle\", new go.Binding(\"fill\", \"color\"), {\n      // angle: 65,\n      // geometryString: \"F M140 0 L70 70 0 50z\",\n      minSize: new go.Size(80, 80),\n      strokeWidth: 0,\n      portId: \"\",\n      fromLinkable: true,\n      toLinkable: true\n    }), $(go.TextBlock, this.textStyle(), {\n      editable: true\n    }, new go.Binding(\"text\"))), // three named ports, one on each side except the top, all output only:\n    this.makePort(\"T\", go.Spot.Top, go.Spot.Top, false, true), this.makePort(\"L\", go.Spot.Left, go.Spot.Left, true, false), this.makePort(\"R\", go.Spot.Right, go.Spot.Right, true, false), this.makePort(\"B\", go.Spot.Bottom, go.Spot.Bottom, true, false)));\n    myDiagram.groupTemplate = $(go.Group, \"Auto\", {\n      resizable: true,\n      resizeObjectName: \"PH\"\n    }, $(go.Panel, \"Auto\", $(go.Shape, \"RoundedRectangle\", {\n      fill: \"rgba(128,128,128,0.33)\",\n      name: \"PH\"\n    }, new go.Binding(\"desiredSize\", \"size\", go.Size.parse).makeTwoWay(go.Size.stringify)), $(go.Placeholder, // represents the area of all member parts,\n    {\n      padding: 3\n    }), $(go.TextBlock, {\n      alignment: go.Spot.Right,\n      font: \"Bold 12pt Sans-Serif\"\n    }, new go.Binding(\"text\"))), //three named ports, one on each side except the top, all output only:\n    this.makePort(\"T\", go.Spot.Top, go.Spot.Top, false, true), this.makePort(\"B\", go.Spot.Bottom, go.Spot.Bottom, true, false));\n    myDiagram.nodeTemplateMap.add(\"case\", $(go.Node, \"Table\", this.nodeStyle(), new go.Binding(\"location\", \"loc\", go.Point.parse), $(go.Panel, \"Auto\", $(go.Shape, \"RoundedRectangle\", new go.Binding(\"fill\", \"color\"), {\n      // angle: 65,\n      // geometryString: \"F M140 0 L70 70 0 50z\",\n      //minSize: new go.Size(80, 80),\n      fromSpot: go.Spot.Bottom,\n      toSpot: go.Spot.Top,\n      strokeWidth: 0,\n      portId: \"\",\n      fromLinkable: true,\n      toLinkable: true\n    }), $(go.TextBlock, this.textStyle(), {\n      editable: true\n    }, new go.Binding(\"text\"))), // three named ports, one on each side except the top, all output only:\n    this.makePort(\"T\", go.Spot.Top, go.Spot.Top, false, true), this.makePort(\"L\", go.Spot.Left, go.Spot.Left, true, false), this.makePort(\"R\", go.Spot.Right, go.Spot.Right, true, false), this.makePort(\"B\", go.Spot.Bottom, go.Spot.Bottom, true, false)));\n    myDiagram.nodeTemplateMap.add(\"switch\", $(go.Node, \"Table\", this.nodeStyle(), $(go.Panel, \"Auto\", $(go.Shape, \"octagon\", new go.Binding(\"fill\", \"color\"), {\n      toSpot: go.Spot.Bottom,\n      minSize: new go.Size(80, 80),\n      strokeWidth: 0\n    }), $(go.TextBlock, this.textStyle(), {\n      editable: true\n    }, new go.Binding(\"text\"))), this.makePort(\"B\", go.Spot.Bottom, go.Spot.Bottom, true, false)));\n    myDiagram.nodeTemplateMap.add(\"for\", $(go.Node, \"Spot\", $(go.Shape, \"Rectangle\", {\n      fill: \"\",\n      minSize: new go.Size(140, 40),\n      strokeWidth: 0\n    }), $(go.Shape, \"TriangleLeft\", {\n      width: 20,\n      height: 40,\n      fill: \"black\",\n      alignment: go.Spot.Left\n    }), $(go.Shape, \"Rectangle\", {\n      width: 120,\n      height: 40,\n      fill: \"black\"\n    }), $(go.Shape, \"TriangleRight\", {\n      width: 20,\n      height: 40,\n      fill: \"black\",\n      alignment: go.Spot.Right\n    }), $(go.TextBlock, this.textStyle(), {\n      text: \"Inicio\",\n      font: \"bold 8pt Helvetica, Arial, sans-serif\",\n      position: new go.Point(0, 0)\n    }), $(go.TextBlock, this.textStyle(), {\n      editable: true,\n      text: \"3\",\n      font: \"bold 8pt Helvetica, Arial, sans-serif\",\n      position: new go.Point(200, 0)\n    }), this.makePort(\"B\", go.Spot.Bottom, go.Spot.Bottom, true, false)));\n    myDiagram.nodeTemplateMap.add(\"End\", $(go.Node, \"Table\", this.nodeStyle(), $(go.Panel, \"Auto\", $(go.Shape, \"Circle\", {\n      minSize: new go.Size(40, 40),\n      fill: \"#DC3C00\",\n      strokeWidth: 0,\n      portId: \"\",\n      fromLinkable: true,\n      toLinkable: true\n    }), $(go.TextBlock, \"End\", this.textStyle(), new go.Binding(\"text\"))), // three named ports, one on each side except the bottom, all input only:\n    this.makePort(\"T\", go.Spot.Top, go.Spot.Top, false, true), this.makePort(\"L\", go.Spot.Left, go.Spot.Left, false, true), this.makePort(\"R\", go.Spot.Right, go.Spot.Right, false, true))); // taken from ../extensions/Figures.js:\n\n    go.Shape.defineFigureGenerator(\"File\", function (shape, w, h) {\n      var geo = new go.Geometry();\n      var fig = new go.PathFigure(0, 0, true); // starting point\n\n      geo.add(fig);\n      fig.add(new go.PathSegment(go.PathSegment.Line, .75 * w, 0));\n      fig.add(new go.PathSegment(go.PathSegment.Line, w, .25 * h));\n      fig.add(new go.PathSegment(go.PathSegment.Line, w, h));\n      fig.add(new go.PathSegment(go.PathSegment.Line, 0, h).close());\n      var fig2 = new go.PathFigure(.75 * w, 0, false);\n      geo.add(fig2); // The Fold\n\n      fig2.add(new go.PathSegment(go.PathSegment.Line, .75 * w, .25 * h));\n      fig2.add(new go.PathSegment(go.PathSegment.Line, w, .25 * h));\n      geo.spot1 = new go.Spot(0, .25);\n      geo.spot2 = go.Spot.BottomRight;\n      return geo;\n    });\n    myDiagram.nodeTemplateMap.add(\"Comment\", $(go.Node, \"Auto\", this.nodeStyle(), $(go.Shape, \"File\", {\n      fill: \"#DEE0A3\",\n      strokeWidth: 0,\n      portId: \"\",\n      fromLinkable: true,\n      toLinkable: true\n    }), $(go.TextBlock, this.textStyle(), {\n      margin: 5,\n      maxSize: new go.Size(200, NaN),\n      wrap: go.TextBlock.WrapFit,\n      textAlign: \"center\",\n      editable: true,\n      font: \"bold 12pt Helvetica, Arial, sans-serif\",\n      stroke: '#454545'\n    }, new go.Binding(\"text\").makeTwoWay()) // no ports, because no links are allowed to connect with a comment\n    )); // replace the default Link template in the linkTemplateMap\n\n    myDiagram.linkTemplate = $(go.Link, // the whole link panel\n    {\n      routing: go.Link.AvoidsNodes,\n      curve: go.Link.JumpOver,\n      corner: 5,\n      toShortLength: 4,\n      relinkableFrom: true,\n      relinkableTo: true,\n      reshapable: true,\n      resegmentable: true,\n      selectionAdorned: false\n    }, new go.Binding(\"points\").makeTwoWay(), $(go.Shape, // the highlight shape, normally transparent\n    {\n      isPanelMain: true,\n      strokeWidth: 8,\n      stroke: \"transparent\",\n      name: \"HIGHLIGHT\"\n    }), $(go.Shape, // the link path shape\n    {\n      isPanelMain: true,\n      stroke: \"gray\",\n      strokeWidth: 2\n    }, new go.Binding(\"stroke\", \"isSelected\", function (sel) {\n      return sel ? \"dodgerblue\" : \"gray\";\n    }).ofObject()), $(go.Shape, // the arrowhead\n    {\n      toArrow: \"standard\",\n      strokeWidth: 0,\n      fill: \"gray\"\n    }), $(go.Panel, \"Auto\", // the link label, normally not visible\n    {\n      visible: false,\n      name: \"LABEL\",\n      segmentIndex: 2,\n      segmentFraction: 0.5\n    }, new go.Binding(\"visible\", \"visible\").makeTwoWay(), $(go.Shape, \"RoundedRectangle\", // the label shape\n    {\n      fill: \"#F8F8F8\",\n      strokeWidth: 0\n    }), $(go.TextBlock, \"Yes\", // the label\n    {\n      textAlign: \"center\",\n      font: \"10pt helvetica, arial, sans-serif\",\n      stroke: \"#333333\",\n      editable: true\n    }, new go.Binding(\"text\").makeTwoWay()))); // temporary links used by LinkingTool and RelinkingTool are also orthogonal:\n\n    myDiagram.toolManager.linkingTool.temporaryLink.routing = go.Link.Orthogonal;\n    myDiagram.toolManager.relinkingTool.temporaryLink.routing = go.Link.Orthogonal; // initialize the Palette that is on the left side of the page\n\n    $(go.Palette, \"Diamond\", // must name or refer to the DIV HTML element\n    {\n      nodeTemplateMap: myDiagram.nodeTemplateMap,\n      // share the templates used by myDiagram\n      model: new go.GraphLinksModel(dataModels.modelsData(), dataModels.modelsLinks())\n    });\n  }\n\n  componentDidMount() {\n    //console.log('componentDidMount')\n    this.renderCanvas();\n  }\n\n  componentWillUpdate(prevProps) {\n    /*console.log(JSON.stringify(prevProps, null, 2))\n    if (this.props.data !== prevProps.data) {\n     console.log('Updating 2');\n     const model = this.state.myModel;\n     const diagram = this.state.myDiagram;\n     model.nodeDataArray = this.props.data;\n     diagram.model = model;\n     this.setState({ myModel: model, myDiagram: diagram });\n    }*/\n  }\n\n  onClickChange() {\n    console.log(myDiagram.model.toJson());\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      className: \"container-fluid\"\n    }, __jsx(\"div\", {\n      className: \"row\"\n    }, __jsx(\"div\", {\n      className: \"col-md-3\",\n      id: \"Diamond\",\n      style: {\n        'backgroundColor': '#373737'\n      }\n    }), __jsx(\"div\", {\n      className: \"col-md-9 row\"\n    }, __jsx(\"div\", {\n      id: \"blockWhite\"\n    }), __jsx(\"div\", {\n      ref: \"goJsDiv\",\n      id: \"goJsDiv\",\n      className: \"col-md-12\",\n      style: {\n        'width': '500px',\n        'height': '700px',\n        'backgroundColor': 'white'\n      }\n    }))), __jsx(\"div\", {\n      className: \"row\"\n    }, __jsx(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: this.onClickChange\n    }, \"Save\")));\n  }\n\n  makePort(name, align, spot, output, input) {\n    var horizontal = align.equals(go.Spot.Top) || align.equals(go.Spot.Bottom); // the port is basically just a transparent rectangle that stretches along the side of the node,\n    // and becomes colored when the mouse passes over it\n\n    return $(go.Shape, {\n      fill: \"transparent\",\n      // changed to a color in the mouseEnter event handler\n      strokeWidth: 0,\n      // no stroke\n      width: horizontal ? NaN : 8,\n      // if not stretching horizontally, just 8 wide\n      height: !horizontal ? NaN : 8,\n      // if not stretching vertically, just 8 tall\n      alignment: align,\n      // align the port on the main Shape\n      stretch: horizontal ? go.GraphObject.Horizontal : go.GraphObject.Vertical,\n      portId: name,\n      // declare this object to be a \"port\"\n      fromSpot: spot,\n      // declare where links may connect at this port\n      fromLinkable: output,\n      // declare whether the user may draw links from here\n      toSpot: spot,\n      // declare where links may connect at this port\n      toLinkable: input,\n      // declare whether the user may draw links to here\n      cursor: \"pointer\",\n      // show a different cursor to indicate potential link point\n      mouseEnter: function (e, port) {\n        // the PORT argument will be this Shape\n        if (!e.diagram.isReadOnly) port.fill = \"#00abe469\";\n      },\n      mouseLeave: function (e, port) {\n        port.fill = \"transparent\";\n      }\n    });\n  }\n\n  textStyle() {\n    return {\n      font: \"bold 11pt Helvetica, Arial, sans-serif\",\n      margin: 2,\n      stroke: \"whitesmoke\"\n    };\n  }\n\n  nodeStyle() {\n    return [// The Node.location comes from the \"loc\" property of the node data,\n    // converted by the Point.parse static method.\n    // If the Node.location is changed, it updates the \"loc\" property of the node data,\n    // converting back using the Point.stringify static method.\n    new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\n      // the Node.location is at the center of each node\n      locationSpot: go.Spot.Center\n    }];\n  }\n\n  showLinkLabel(e) {\n    var label = e.subject.findObject(\"LABEL\");\n    if (label !== null) label.visible = e.subject.fromNode.data.category === \"Conditional\";\n  }\n\n}","map":{"version":3,"sources":["C:/Users/LENOVO/Documents/teoria/Views/pages/Components/Dfd.jsx"],"names":["React","Component","go","dataModels","$","GraphObject","make","myDiagram","GoJs","constructor","props","renderCanvas","bind","state","myModel","Diagram","refs","goJsDiv","showLinkLabel","ToolManager","WheelZoom","nodeTemplateMap","add","Node","nodeStyle","Panel","Shape","Binding","fill","strokeWidth","portId","fromLinkable","toLinkable","TextBlock","textStyle","margin","maxSize","Size","NaN","wrap","WrapFit","editable","makeTwoWay","makePort","Spot","Top","TopSide","Left","LeftSide","Right","RightSide","Bottom","BottomSide","minSize","groupTemplate","Group","resizable","resizeObjectName","name","parse","stringify","Placeholder","padding","alignment","font","Point","fromSpot","toSpot","width","height","text","position","defineFigureGenerator","shape","w","h","geo","Geometry","fig","PathFigure","PathSegment","Line","close","fig2","spot1","spot2","BottomRight","textAlign","stroke","linkTemplate","Link","routing","AvoidsNodes","curve","JumpOver","corner","toShortLength","relinkableFrom","relinkableTo","reshapable","resegmentable","selectionAdorned","isPanelMain","sel","ofObject","toArrow","visible","segmentIndex","segmentFraction","toolManager","linkingTool","temporaryLink","Orthogonal","relinkingTool","Palette","model","GraphLinksModel","modelsData","modelsLinks","componentDidMount","componentWillUpdate","prevProps","onClickChange","console","log","toJson","render","align","spot","output","input","horizontal","equals","stretch","Horizontal","Vertical","cursor","mouseEnter","e","port","diagram","isReadOnly","mouseLeave","locationSpot","Center","label","subject","findObject","fromNode","data","category"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport go from 'gojs';\n//import './App.css';\nimport './figure';\nimport dataModels from './modelsDfg'\nconst $ = go.GraphObject.make;\nvar myDiagram;\nexport default class GoJs extends Component {\n  constructor(props) {\n    super(props);\n    this.renderCanvas = this.renderCanvas.bind(this);\n    this.state = { myModel: null, myDiagram: null }\n  }\n\n  renderCanvas() {\n    myDiagram = $(go.Diagram, this.refs.goJsDiv, {\n      \"LinkDrawn\": this.showLinkLabel,  // this DiagramEvent listener is defined below\n      \"LinkRelinked\": this.showLinkLabel,\n      \"toolManager.mouseWheelBehavior\": go.ToolManager.WheelZoom,\n      \"draggingTool.isGridSnapEnabled\": true,\n      \"undoManager.isEnabled\": true  // enable undo & redo\n    }\n    );\n    // define the Node templates for regular nodes\n    myDiagram.nodeTemplateMap.add(\"\", // the default category\n      $(go.Node, \"Table\", this.nodeStyle(),\n        // the main object is a Panel that surrounds a TextBlock with a rectangular Shape\n        $(go.Panel, \"Auto\",\n          $(go.Shape, \"Rectangle\", new go.Binding(\"fill\", \"color\"),\n            {\n              fill: \"#00A9C9\",\n              strokeWidth: 0,\n              portId: \"\",\n              fromLinkable: true, toLinkable: true\n            },\n            new go.Binding(\"figure\", \"figure\")),\n          $(go.TextBlock, this.textStyle(), {\n            margin: 8,\n            maxSize: new go.Size(160, NaN),\n            wrap: go.TextBlock.WrapFit,\n            editable: true\n          },\n            new go.Binding(\"text\").makeTwoWay())\n        ),\n        // four named ports, one on each side:\n        this.makePort(\"T\", go.Spot.Top, go.Spot.TopSide, false, true),\n        this.makePort(\"L\", go.Spot.Left, go.Spot.LeftSide, true, true),\n        this.makePort(\"R\", go.Spot.Right, go.Spot.RightSide, true, true),\n        this.makePort(\"B\", go.Spot.Bottom, go.Spot.BottomSide, true, false)\n      ));\n    myDiagram.nodeTemplateMap.add(\"Conditional\",\n      $(go.Node, \"Table\", this.nodeStyle(),\n        // the main object is a Panel that surrounds a TextBlock with a rectangular Shape\n        $(go.Panel, \"Auto\",\n          $(go.Shape, \"Diamond\", {\n            fill: \"#00A9C9\",\n            strokeWidth: 0,\n            portId: \"\",\n            fromLinkable: true, toLinkable: true\n          },\n            new go.Binding(\"figure\", \"figure\")),\n          $(go.TextBlock, this.textStyle(), {\n            margin: 8,\n            maxSize: new go.Size(160, NaN),\n            wrap: go.TextBlock.WrapFit,\n            editable: true\n          },\n            new go.Binding(\"text\").makeTwoWay())\n        ),\n        // four named ports, one on each side:\n        this.makePort(\"T\", go.Spot.Top, go.Spot.Top, false, true),\n        this.makePort(\"L\", go.Spot.Left, go.Spot.Left, true, true),\n        this.makePort(\"R\", go.Spot.Right, go.Spot.Right, true, true),\n        this.makePort(\"B\", go.Spot.Bottom, go.Spot.Bottom, true, false)\n      ));\n    myDiagram.nodeTemplateMap.add(\"Start\",\n      $(go.Node, \"Table\", this.nodeStyle(),\n        $(go.Panel, \"Auto\",\n          $(go.Shape, \"Circle\",\n            new go.Binding(\"fill\", \"color\"), {\n            minSize: new go.Size(40, 40),\n            strokeWidth: 0,\n            portId: \"\",\n            fromLinkable: true, toLinkable: true\n          }),\n          $(go.TextBlock, \"Start\", this.textStyle(),\n            new go.Binding(\"text\"))\n        ),\n        // three named ports, one on each side except the top, all output only:\n        /* this.makePort(\"L\", go.Spot.Left, go.Spot.Left, true, false),\n         this.makePort(\"R\", go.Spot.Right, go.Spot.Right, true, false),*/\n        this.makePort(\"B\", go.Spot.Bottom, go.Spot.Bottom, true, false)\n      ));\n    myDiagram.nodeTemplateMap.add(\"Var\",\n      $(go.Node, \"Table\", this.nodeStyle(),\n        $(go.Panel, \"Auto\",\n          $(go.Shape, \"square\",\n            new go.Binding(\"fill\", \"color\"), {\n            minSize: new go.Size(40, 40),\n            strokeWidth: 0,\n            portId: \"\",\n            fromLinkable: true, toLinkable: true\n          }),\n          $(go.TextBlock, this.textStyle(), { editable: true },\n            new go.Binding(\"text\"))\n        ),\n        // three named ports, one on each side except the top, all output only:\n        this.makePort(\"T\", go.Spot.Top, go.Spot.TopSide, false, true),\n        this.makePort(\"L\", go.Spot.Left, go.Spot.LeftSide, true, true),\n        this.makePort(\"R\", go.Spot.Right, go.Spot.RightSide, true, true),\n        this.makePort(\"B\", go.Spot.Bottom, go.Spot.BottomSide, true, false)\n      ));\n\n\n    myDiagram.nodeTemplateMap.add(\"If\",\n      $(go.Node, \"Table\", this.nodeStyle(),\n        $(go.Panel, \"Auto\",\n          $(go.Shape, \"RightTriangle\",\n            new go.Binding(\"fill\", \"color\"), {\n            // angle: 65,\n            // geometryString: \"F M140 0 L70 70 0 50z\",\n            minSize: new go.Size(80, 80),\n            strokeWidth: 0,\n            portId: \"\",\n            fromLinkable: true, toLinkable: true\n          }),\n          $(go.TextBlock, this.textStyle(), { editable: true },\n            new go.Binding(\"text\"))\n        ),\n        // three named ports, one on each side except the top, all output only:\n        this.makePort(\"T\", go.Spot.Top, go.Spot.Top, false, true),\n        this.makePort(\"L\", go.Spot.Left, go.Spot.Left, true, false),\n        this.makePort(\"R\", go.Spot.Right, go.Spot.Right, true, false),\n        this.makePort(\"B\", go.Spot.Bottom, go.Spot.Bottom, true, false)\n      ));\n\n    myDiagram.groupTemplate =\n      $(go.Group, \"Auto\", {\n        resizable: true,\n        resizeObjectName: \"PH\"\n      },\n        $(go.Panel, \"Auto\",\n          $(go.Shape, \"RoundedRectangle\",\n            {\n              fill: \"rgba(128,128,128,0.33)\",\n              name: \"PH\",\n            },\n            new go.Binding(\"desiredSize\", \"size\", go.Size.parse).makeTwoWay(go.Size.stringify)),\n          $(go.Placeholder,    // represents the area of all member parts,\n            { padding: 3 }),\n          $(go.TextBlock, { alignment: go.Spot.Right, font: \"Bold 12pt Sans-Serif\" },\n            new go.Binding(\"text\"))\n        ),\n\n        //three named ports, one on each side except the top, all output only:\n        this.makePort(\"T\", go.Spot.Top, go.Spot.Top, false, true),\n        this.makePort(\"B\", go.Spot.Bottom, go.Spot.Bottom, true, false)\n      );\n\n    myDiagram.nodeTemplateMap.add(\"case\",\n      $(go.Node, \"Table\", this.nodeStyle(), new go.Binding(\"location\", \"loc\", go.Point.parse),\n        $(go.Panel, \"Auto\",\n          $(go.Shape, \"RoundedRectangle\",\n            new go.Binding(\"fill\", \"color\"), {\n            // angle: 65,\n            // geometryString: \"F M140 0 L70 70 0 50z\",\n            //minSize: new go.Size(80, 80),\n            fromSpot: go.Spot.Bottom, toSpot: go.Spot.Top,\n            strokeWidth: 0,\n            portId: \"\",\n            fromLinkable: true, toLinkable: true\n          }),\n          $(go.TextBlock, this.textStyle(), { editable: true },\n            new go.Binding(\"text\"))\n        ),\n        // three named ports, one on each side except the top, all output only:\n        this.makePort(\"T\", go.Spot.Top, go.Spot.Top, false, true),\n        this.makePort(\"L\", go.Spot.Left, go.Spot.Left, true, false),\n        this.makePort(\"R\", go.Spot.Right, go.Spot.Right, true, false),\n        this.makePort(\"B\", go.Spot.Bottom, go.Spot.Bottom, true, false)\n      ));\n\n    myDiagram.nodeTemplateMap.add(\"switch\",\n      $(go.Node, \"Table\", this.nodeStyle(),\n        $(go.Panel, \"Auto\",\n          $(go.Shape, \"octagon\",\n            new go.Binding(\"fill\", \"color\"), {\n            toSpot: go.Spot.Bottom,\n            minSize: new go.Size(80, 80),\n            strokeWidth: 0\n          }),\n          $(go.TextBlock, this.textStyle(), { editable: true },\n            new go.Binding(\"text\"))\n        ),\n        this.makePort(\"B\", go.Spot.Bottom, go.Spot.Bottom, true, false)\n      ));\n\n    myDiagram.nodeTemplateMap.add(\"for\",\n      $(go.Node, \"Spot\",\n        $(go.Shape, \"Rectangle\",\n          {\n            fill: \"\",\n            minSize: new go.Size(140, 40),\n            strokeWidth: 0\n          }),\n        $(go.Shape, \"TriangleLeft\", { width: 20, height: 40, fill: \"black\", alignment: go.Spot.Left }),\n        $(go.Shape, \"Rectangle\", { width: 120, height: 40, fill: \"black\" }),\n        $(go.Shape, \"TriangleRight\", { width: 20, height: 40, fill: \"black\", alignment: go.Spot.Right }),\n        $(go.TextBlock, this.textStyle(), { text: \"Inicio\", font: \"bold 8pt Helvetica, Arial, sans-serif\", position: new go.Point(0, 0) }),\n        $(go.TextBlock, this.textStyle(), { editable: true, text: \"3\", font: \"bold 8pt Helvetica, Arial, sans-serif\", position: new go.Point(200, 0) }),\n        this.makePort(\"B\", go.Spot.Bottom, go.Spot.Bottom, true, false)\n      ));\n    myDiagram.nodeTemplateMap.add(\"End\",\n      $(go.Node, \"Table\", this.nodeStyle(),\n        $(go.Panel, \"Auto\",\n          $(go.Shape, \"Circle\", {\n            minSize: new go.Size(40, 40),\n            fill: \"#DC3C00\",\n            strokeWidth: 0,\n            portId: \"\",\n            fromLinkable: true, toLinkable: true\n          }),\n          $(go.TextBlock, \"End\", this.textStyle(),\n            new go.Binding(\"text\"))\n        ),\n        // three named ports, one on each side except the bottom, all input only:\n        this.makePort(\"T\", go.Spot.Top, go.Spot.Top, false, true),\n        this.makePort(\"L\", go.Spot.Left, go.Spot.Left, false, true),\n        this.makePort(\"R\", go.Spot.Right, go.Spot.Right, false, true)\n      ));\n    // taken from ../extensions/Figures.js:\n    go.Shape.defineFigureGenerator(\"File\", function (shape, w, h) {\n      var geo = new go.Geometry();\n      var fig = new go.PathFigure(0, 0, true); // starting point\n      geo.add(fig);\n      fig.add(new go.PathSegment(go.PathSegment.Line, .75 * w, 0));\n      fig.add(new go.PathSegment(go.PathSegment.Line, w, .25 * h));\n      fig.add(new go.PathSegment(go.PathSegment.Line, w, h));\n      fig.add(new go.PathSegment(go.PathSegment.Line, 0, h).close());\n      var fig2 = new go.PathFigure(.75 * w, 0, false);\n      geo.add(fig2);\n      // The Fold\n      fig2.add(new go.PathSegment(go.PathSegment.Line, .75 * w, .25 * h));\n      fig2.add(new go.PathSegment(go.PathSegment.Line, w, .25 * h));\n      geo.spot1 = new go.Spot(0, .25);\n      geo.spot2 = go.Spot.BottomRight;\n      return geo;\n    });\n    myDiagram.nodeTemplateMap.add(\"Comment\",\n      $(go.Node, \"Auto\", this.nodeStyle(),\n        $(go.Shape, \"File\", {\n          fill: \"#DEE0A3\",\n          strokeWidth: 0,\n          portId: \"\",\n          fromLinkable: true, toLinkable: true\n        }),\n        $(go.TextBlock, this.textStyle(), {\n          margin: 5,\n          maxSize: new go.Size(200, NaN),\n          wrap: go.TextBlock.WrapFit,\n          textAlign: \"center\",\n          editable: true,\n          font: \"bold 12pt Helvetica, Arial, sans-serif\",\n          stroke: '#454545'\n        },\n          new go.Binding(\"text\").makeTwoWay())\n        // no ports, because no links are allowed to connect with a comment\n      ));\n    // replace the default Link template in the linkTemplateMap\n    myDiagram.linkTemplate =\n      $(go.Link, // the whole link panel\n        {\n          routing: go.Link.AvoidsNodes,\n          curve: go.Link.JumpOver,\n          corner: 5,\n          toShortLength: 4,\n          relinkableFrom: true, relinkableTo: true,\n          reshapable: true,\n          resegmentable: true,\n          selectionAdorned: false\n        },\n        new go.Binding(\"points\").makeTwoWay(),\n        $(go.Shape, // the highlight shape, normally transparent\n          {\n            isPanelMain: true,\n            strokeWidth: 8,\n            stroke: \"transparent\",\n\n            name: \"HIGHLIGHT\"\n          }),\n        $(go.Shape, // the link path shape\n          {\n            isPanelMain: true,\n            stroke: \"gray\",\n\n            strokeWidth: 2\n          },\n          new go.Binding(\"stroke\", \"isSelected\", function (sel) {\n            return sel ? \"dodgerblue\" : \"gray\";\n          }).ofObject()),\n        $(go.Shape, // the arrowhead\n          {\n            toArrow: \"standard\",\n            strokeWidth: 0,\n\n            fill: \"gray\"\n          }),\n        $(go.Panel, \"Auto\", // the link label, normally not visible\n          {\n            visible: false,\n            name: \"LABEL\",\n            segmentIndex: 2,\n            segmentFraction: 0.5\n          },\n          new go.Binding(\"visible\", \"visible\").makeTwoWay(),\n          $(go.Shape, \"RoundedRectangle\", // the label shape\n            {\n              fill: \"#F8F8F8\",\n              strokeWidth: 0\n            }),\n          $(go.TextBlock, \"Yes\", // the label\n            {\n              textAlign: \"center\",\n              font: \"10pt helvetica, arial, sans-serif\",\n              stroke: \"#333333\",\n              editable: true\n            },\n            new go.Binding(\"text\").makeTwoWay())\n        )\n      );\n\n    // temporary links used by LinkingTool and RelinkingTool are also orthogonal:\n    myDiagram.toolManager.linkingTool.temporaryLink.routing = go.Link.Orthogonal;\n    myDiagram.toolManager.relinkingTool.temporaryLink.routing = go.Link.Orthogonal;\n\n    // initialize the Palette that is on the left side of the page\n\n    $(go.Palette, \"Diamond\", // must name or refer to the DIV HTML element\n      {\n        nodeTemplateMap: myDiagram.nodeTemplateMap, // share the templates used by myDiagram\n        model: new go.GraphLinksModel(dataModels.modelsData(), dataModels.modelsLinks())\n      });\n\n  }\n\n\n  componentDidMount() {\n    //console.log('componentDidMount')\n    this.renderCanvas();\n  }\n\n\n  componentWillUpdate(prevProps) {\n    /*console.log(JSON.stringify(prevProps, null, 2))\n  if (this.props.data !== prevProps.data) {\n     console.log('Updating 2');\n     const model = this.state.myModel;\n     const diagram = this.state.myDiagram;\n     model.nodeDataArray = this.props.data;\n     diagram.model = model;\n     this.setState({ myModel: model, myDiagram: diagram });\n   }*/\n  }\n  onClickChange() {\n    console.log(myDiagram.model.toJson());\n  }\n  render() {\n    return (\n      <div className='container-fluid'>\n        <div className='row'>\n          <div className='col-md-3' id='Diamond' style={{ 'backgroundColor': '#373737' }}></div>\n          <div className='col-md-9 row'>\n            <div id='blockWhite' ></div>\n            <div ref=\"goJsDiv\" id='goJsDiv' className='col-md-12' style={{ 'width': '500px', 'height': '700px', 'backgroundColor': 'white' }}>\n            </div>\n          </div>\n        </div>\n        <div className='row'>\n          <button className='btn btn-primary' onClick={this.onClickChange}>Save</button>\n        </div>\n      </div>\n    )\n  }\n\n\n  makePort(name, align, spot, output, input) {\n    var horizontal = align.equals(go.Spot.Top) || align.equals(go.Spot.Bottom);\n    // the port is basically just a transparent rectangle that stretches along the side of the node,\n    // and becomes colored when the mouse passes over it\n    return $(go.Shape, {\n      fill: \"transparent\", // changed to a color in the mouseEnter event handler\n      strokeWidth: 0, // no stroke\n      width: horizontal ? NaN : 8, // if not stretching horizontally, just 8 wide\n      height: !horizontal ? NaN : 8, // if not stretching vertically, just 8 tall\n      alignment: align, // align the port on the main Shape\n      stretch: (horizontal ? go.GraphObject.Horizontal : go.GraphObject.Vertical),\n      portId: name, // declare this object to be a \"port\"\n      fromSpot: spot, // declare where links may connect at this port\n      fromLinkable: output, // declare whether the user may draw links from here\n      toSpot: spot, // declare where links may connect at this port\n      toLinkable: input, // declare whether the user may draw links to here\n      cursor: \"pointer\", // show a different cursor to indicate potential link point\n\n      mouseEnter: function (e, port) { // the PORT argument will be this Shape\n        if (!e.diagram.isReadOnly) port.fill = \"#00abe469\";\n      },\n      mouseLeave: function (e, port) {\n        port.fill = \"transparent\";\n      }\n    });\n  }\n\n\n  textStyle() {\n    return {\n      font: \"bold 11pt Helvetica, Arial, sans-serif\",\n      margin: 2,\n      stroke: \"whitesmoke\"\n    }\n  }\n\n  nodeStyle() {\n    return [\n      // The Node.location comes from the \"loc\" property of the node data,\n      // converted by the Point.parse static method.\n      // If the Node.location is changed, it updates the \"loc\" property of the node data,\n      // converting back using the Point.stringify static method.\n      new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\n        // the Node.location is at the center of each node\n        locationSpot: go.Spot.Center\n      }\n    ];\n  }\n\n  showLinkLabel(e) {\n    var label = e.subject.findObject(\"LABEL\");\n    if (label !== null) label.visible = (e.subject.fromNode.data.category === \"Conditional\");\n  }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}