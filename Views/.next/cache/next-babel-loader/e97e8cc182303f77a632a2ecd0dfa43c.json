{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport go from 'gojs'; //import './App.css';\n\nimport './figure';\nimport dataModels from './modelsDfg';\nvar $ = go.GraphObject.make;\nvar myDiagram;\n\nvar GoJs =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(GoJs, _Component);\n\n  function GoJs(props) {\n    var _this;\n\n    _classCallCheck(this, GoJs);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(GoJs).call(this, props));\n    _this.renderCanvas = _this.renderCanvas.bind(_assertThisInitialized(_this));\n    _this.state = {\n      myModel: null,\n      myDiagram: null\n    };\n    return _this;\n  }\n\n  _createClass(GoJs, [{\n    key: \"renderCanvas\",\n    value: function renderCanvas() {\n      myDiagram = $(go.Diagram, this.refs.goJsDiv, {\n        \"LinkDrawn\": this.showLinkLabel,\n        // this DiagramEvent listener is defined below\n        \"LinkRelinked\": this.showLinkLabel,\n        \"toolManager.mouseWheelBehavior\": go.ToolManager.WheelZoom,\n        \"draggingTool.isGridSnapEnabled\": true,\n        \"undoManager.isEnabled\": true // enable undo & redo\n\n      }); // define the Node templates for regular nodes\n\n      myDiagram.nodeTemplateMap.add(\"\", // the default category\n      $(go.Node, \"Table\", this.nodeStyle(), // the main object is a Panel that surrounds a TextBlock with a rectangular Shape\n      $(go.Panel, \"Auto\", $(go.Shape, \"Rectangle\", new go.Binding(\"fill\", \"color\"), {\n        fill: \"#00A9C9\",\n        strokeWidth: 0,\n        portId: \"\",\n        fromLinkable: true,\n        toLinkable: true\n      }, new go.Binding(\"figure\", \"figure\")), $(go.TextBlock, this.textStyle(), {\n        margin: 8,\n        maxSize: new go.Size(160, NaN),\n        wrap: go.TextBlock.WrapFit,\n        editable: true\n      }, new go.Binding(\"text\").makeTwoWay())), // four named ports, one on each side:\n      this.makePort(\"T\", go.Spot.Top, go.Spot.TopSide, false, true), this.makePort(\"L\", go.Spot.Left, go.Spot.LeftSide, true, true), this.makePort(\"R\", go.Spot.Right, go.Spot.RightSide, true, true), this.makePort(\"B\", go.Spot.Bottom, go.Spot.BottomSide, true, false)));\n      myDiagram.nodeTemplateMap.add(\"Conditional\", $(go.Node, \"Table\", this.nodeStyle(), // the main object is a Panel that surrounds a TextBlock with a rectangular Shape\n      $(go.Panel, \"Auto\", $(go.Shape, \"Diamond\", {\n        fill: \"#00A9C9\",\n        strokeWidth: 0,\n        portId: \"\",\n        fromLinkable: true,\n        toLinkable: true\n      }, new go.Binding(\"figure\", \"figure\")), $(go.TextBlock, this.textStyle(), {\n        margin: 8,\n        maxSize: new go.Size(160, NaN),\n        wrap: go.TextBlock.WrapFit,\n        editable: true\n      }, new go.Binding(\"text\").makeTwoWay())), // four named ports, one on each side:\n      this.makePort(\"T\", go.Spot.Top, go.Spot.Top, false, true), this.makePort(\"L\", go.Spot.Left, go.Spot.Left, true, true), this.makePort(\"R\", go.Spot.Right, go.Spot.Right, true, true), this.makePort(\"B\", go.Spot.Bottom, go.Spot.Bottom, true, false)));\n      myDiagram.nodeTemplateMap.add(\"Start\", $(go.Node, \"Table\", this.nodeStyle(), $(go.Panel, \"Auto\", $(go.Shape, \"Circle\", new go.Binding(\"fill\", \"color\"), {\n        minSize: new go.Size(40, 40),\n        strokeWidth: 0,\n        portId: \"\",\n        fromLinkable: true,\n        toLinkable: true\n      }), $(go.TextBlock, \"Start\", this.textStyle(), new go.Binding(\"text\"))), // three named ports, one on each side except the top, all output only:\n\n      /* this.makePort(\"L\", go.Spot.Left, go.Spot.Left, true, false),\n       this.makePort(\"R\", go.Spot.Right, go.Spot.Right, true, false),*/\n      this.makePort(\"B\", go.Spot.Bottom, go.Spot.Bottom, true, false)));\n      myDiagram.nodeTemplateMap.add(\"Var\", $(go.Node, \"Table\", this.nodeStyle(), $(go.Panel, \"Auto\", $(go.Shape, \"square\", new go.Binding(\"fill\", \"color\"), {\n        minSize: new go.Size(40, 40),\n        strokeWidth: 0,\n        portId: \"\",\n        fromLinkable: true,\n        toLinkable: true\n      }), $(go.TextBlock, this.textStyle(), {\n        editable: true\n      }, new go.Binding(\"text\"))), // three named ports, one on each side except the top, all output only:\n      this.makePort(\"T\", go.Spot.Top, go.Spot.TopSide, false, true), this.makePort(\"L\", go.Spot.Left, go.Spot.LeftSide, true, true), this.makePort(\"R\", go.Spot.Right, go.Spot.RightSide, true, true), this.makePort(\"B\", go.Spot.Bottom, go.Spot.BottomSide, true, false)));\n      myDiagram.nodeTemplateMap.add(\"If\", $(go.Node, \"Table\", this.nodeStyle(), $(go.Panel, \"Auto\", $(go.Shape, \"RightTriangle\", new go.Binding(\"fill\", \"color\"), {\n        // angle: 65,\n        // geometryString: \"F M140 0 L70 70 0 50z\",\n        minSize: new go.Size(80, 80),\n        strokeWidth: 0,\n        portId: \"\",\n        fromLinkable: true,\n        toLinkable: true\n      }), $(go.TextBlock, this.textStyle(), {\n        editable: true\n      }, new go.Binding(\"text\"))), // three named ports, one on each side except the top, all output only:\n      this.makePort(\"T\", go.Spot.Top, go.Spot.Top, false, true), this.makePort(\"L\", go.Spot.Left, go.Spot.Left, true, false), this.makePort(\"R\", go.Spot.Right, go.Spot.Right, true, false), this.makePort(\"B\", go.Spot.Bottom, go.Spot.Bottom, true, false)));\n      myDiagram.groupTemplate = $(go.Group, \"Auto\", {\n        resizable: true,\n        resizeObjectName: \"PH\"\n      }, $(go.Panel, \"Auto\", $(go.Shape, \"RoundedRectangle\", {\n        fill: \"rgba(128,128,128,0.33)\",\n        name: \"PH\"\n      }, new go.Binding(\"desiredSize\", \"size\", go.Size.parse).makeTwoWay(go.Size.stringify)), $(go.Placeholder, // represents the area of all member parts,\n      {\n        padding: 3\n      }), $(go.TextBlock, {\n        alignment: go.Spot.Right,\n        font: \"Bold 12pt Sans-Serif\"\n      }, new go.Binding(\"text\"))), //three named ports, one on each side except the top, all output only:\n      this.makePort(\"T\", go.Spot.Top, go.Spot.Top, false, true), this.makePort(\"B\", go.Spot.Bottom, go.Spot.Bottom, true, false));\n      myDiagram.nodeTemplateMap.add(\"case\", $(go.Node, \"Table\", this.nodeStyle(), new go.Binding(\"location\", \"loc\", go.Point.parse), $(go.Panel, \"Auto\", $(go.Shape, \"RoundedRectangle\", new go.Binding(\"fill\", \"color\"), {\n        // angle: 65,\n        // geometryString: \"F M140 0 L70 70 0 50z\",\n        //minSize: new go.Size(80, 80),\n        fromSpot: go.Spot.Bottom,\n        toSpot: go.Spot.Top,\n        strokeWidth: 0,\n        portId: \"\",\n        fromLinkable: true,\n        toLinkable: true\n      }), $(go.TextBlock, this.textStyle(), {\n        editable: true\n      }, new go.Binding(\"text\"))), // three named ports, one on each side except the top, all output only:\n      this.makePort(\"T\", go.Spot.Top, go.Spot.Top, false, true), this.makePort(\"L\", go.Spot.Left, go.Spot.Left, true, false), this.makePort(\"R\", go.Spot.Right, go.Spot.Right, true, false), this.makePort(\"B\", go.Spot.Bottom, go.Spot.Bottom, true, false)));\n      myDiagram.nodeTemplateMap.add(\"switch\", $(go.Node, \"Table\", this.nodeStyle(), $(go.Panel, \"Auto\", $(go.Shape, \"octagon\", new go.Binding(\"fill\", \"color\"), {\n        toSpot: go.Spot.Bottom,\n        minSize: new go.Size(80, 80),\n        strokeWidth: 0\n      }), $(go.TextBlock, this.textStyle(), {\n        editable: true\n      }, new go.Binding(\"text\"))), this.makePort(\"B\", go.Spot.Bottom, go.Spot.Bottom, true, false)));\n      myDiagram.nodeTemplateMap.add(\"for\", $(go.Node, \"Spot\", $(go.Shape, \"Rectangle\", {\n        fill: \"\",\n        minSize: new go.Size(140, 40),\n        strokeWidth: 0\n      }), $(go.Shape, \"TriangleLeft\", {\n        width: 20,\n        height: 40,\n        fill: \"black\",\n        alignment: go.Spot.Left\n      }), $(go.Shape, \"Rectangle\", {\n        width: 120,\n        height: 40,\n        fill: \"black\"\n      }), $(go.Shape, \"TriangleRight\", {\n        width: 20,\n        height: 40,\n        fill: \"black\",\n        alignment: go.Spot.Right\n      }), $(go.TextBlock, this.textStyle(), {\n        text: \"Inicio\",\n        font: \"bold 8pt Helvetica, Arial, sans-serif\",\n        position: new go.Point(0, 0)\n      }), $(go.TextBlock, this.textStyle(), {\n        editable: true,\n        text: \"3\",\n        font: \"bold 8pt Helvetica, Arial, sans-serif\",\n        position: new go.Point(200, 0)\n      }), this.makePort(\"B\", go.Spot.Bottom, go.Spot.Bottom, true, false)));\n      myDiagram.nodeTemplateMap.add(\"End\", $(go.Node, \"Table\", this.nodeStyle(), $(go.Panel, \"Auto\", $(go.Shape, \"Circle\", {\n        minSize: new go.Size(40, 40),\n        fill: \"#DC3C00\",\n        strokeWidth: 0,\n        portId: \"\",\n        fromLinkable: true,\n        toLinkable: true\n      }), $(go.TextBlock, \"End\", this.textStyle(), new go.Binding(\"text\"))), // three named ports, one on each side except the bottom, all input only:\n      this.makePort(\"T\", go.Spot.Top, go.Spot.Top, false, true), this.makePort(\"L\", go.Spot.Left, go.Spot.Left, false, true), this.makePort(\"R\", go.Spot.Right, go.Spot.Right, false, true))); // taken from ../extensions/Figures.js:\n\n      go.Shape.defineFigureGenerator(\"File\", function (shape, w, h) {\n        var geo = new go.Geometry();\n        var fig = new go.PathFigure(0, 0, true); // starting point\n\n        geo.add(fig);\n        fig.add(new go.PathSegment(go.PathSegment.Line, .75 * w, 0));\n        fig.add(new go.PathSegment(go.PathSegment.Line, w, .25 * h));\n        fig.add(new go.PathSegment(go.PathSegment.Line, w, h));\n        fig.add(new go.PathSegment(go.PathSegment.Line, 0, h).close());\n        var fig2 = new go.PathFigure(.75 * w, 0, false);\n        geo.add(fig2); // The Fold\n\n        fig2.add(new go.PathSegment(go.PathSegment.Line, .75 * w, .25 * h));\n        fig2.add(new go.PathSegment(go.PathSegment.Line, w, .25 * h));\n        geo.spot1 = new go.Spot(0, .25);\n        geo.spot2 = go.Spot.BottomRight;\n        return geo;\n      });\n      myDiagram.nodeTemplateMap.add(\"Comment\", $(go.Node, \"Auto\", this.nodeStyle(), $(go.Shape, \"File\", {\n        fill: \"#DEE0A3\",\n        strokeWidth: 0,\n        portId: \"\",\n        fromLinkable: true,\n        toLinkable: true\n      }), $(go.TextBlock, this.textStyle(), {\n        margin: 5,\n        maxSize: new go.Size(200, NaN),\n        wrap: go.TextBlock.WrapFit,\n        textAlign: \"center\",\n        editable: true,\n        font: \"bold 12pt Helvetica, Arial, sans-serif\",\n        stroke: '#454545'\n      }, new go.Binding(\"text\").makeTwoWay()) // no ports, because no links are allowed to connect with a comment\n      )); // replace the default Link template in the linkTemplateMap\n\n      myDiagram.linkTemplate = $(go.Link, // the whole link panel\n      {\n        routing: go.Link.AvoidsNodes,\n        curve: go.Link.JumpOver,\n        corner: 5,\n        toShortLength: 4,\n        relinkableFrom: true,\n        relinkableTo: true,\n        reshapable: true,\n        resegmentable: true,\n        selectionAdorned: false\n      }, new go.Binding(\"points\").makeTwoWay(), $(go.Shape, // the highlight shape, normally transparent\n      {\n        isPanelMain: true,\n        strokeWidth: 8,\n        stroke: \"transparent\",\n        name: \"HIGHLIGHT\"\n      }), $(go.Shape, // the link path shape\n      {\n        isPanelMain: true,\n        stroke: \"gray\",\n        strokeWidth: 2\n      }, new go.Binding(\"stroke\", \"isSelected\", function (sel) {\n        return sel ? \"dodgerblue\" : \"gray\";\n      }).ofObject()), $(go.Shape, // the arrowhead\n      {\n        toArrow: \"standard\",\n        strokeWidth: 0,\n        fill: \"gray\"\n      }), $(go.Panel, \"Auto\", // the link label, normally not visible\n      {\n        visible: false,\n        name: \"LABEL\",\n        segmentIndex: 2,\n        segmentFraction: 0.5\n      }, new go.Binding(\"visible\", \"visible\").makeTwoWay(), $(go.Shape, \"RoundedRectangle\", // the label shape\n      {\n        fill: \"#F8F8F8\",\n        strokeWidth: 0\n      }), $(go.TextBlock, \"Yes\", // the label\n      {\n        textAlign: \"center\",\n        font: \"10pt helvetica, arial, sans-serif\",\n        stroke: \"#333333\",\n        editable: true\n      }, new go.Binding(\"text\").makeTwoWay()))); // temporary links used by LinkingTool and RelinkingTool are also orthogonal:\n\n      myDiagram.toolManager.linkingTool.temporaryLink.routing = go.Link.Orthogonal;\n      myDiagram.toolManager.relinkingTool.temporaryLink.routing = go.Link.Orthogonal; // initialize the Palette that is on the left side of the page\n\n      $(go.Palette, \"Diamond\", // must name or refer to the DIV HTML element\n      {\n        nodeTemplateMap: myDiagram.nodeTemplateMap,\n        // share the templates used by myDiagram\n        model: new go.GraphLinksModel(dataModels.modelsData(), dataModels.modelsLinks())\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      //console.log('componentDidMount')\n      this.renderCanvas();\n    }\n  }, {\n    key: \"componentWillUpdate\",\n    value: function componentWillUpdate(prevProps) {\n      /*console.log(JSON.stringify(prevProps, null, 2))\n      if (this.props.data !== prevProps.data) {\n       console.log('Updating 2');\n       const model = this.state.myModel;\n       const diagram = this.state.myDiagram;\n       model.nodeDataArray = this.props.data;\n       diagram.model = model;\n       this.setState({ myModel: model, myDiagram: diagram });\n      }*/\n    }\n  }, {\n    key: \"onClickChange\",\n    value: function onClickChange() {\n      console.log(myDiagram.model.toJson());\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        className: \"container-fluid\"\n      }, __jsx(\"div\", {\n        className: \"row\"\n      }, __jsx(\"div\", {\n        className: \"col-md-3\",\n        id: \"Diamond\",\n        style: {\n          'backgroundColor': '#373737'\n        }\n      }), __jsx(\"div\", {\n        className: \"col-md-9 row\"\n      }, __jsx(\"div\", {\n        id: \"blockWhite\"\n      }), __jsx(\"div\", {\n        ref: \"goJsDiv\",\n        id: \"goJsDiv\",\n        className: \"col-md-12\",\n        style: {\n          'width': '500px',\n          'height': '700px',\n          'backgroundColor': '#373737'\n        }\n      }))), __jsx(\"div\", {\n        className: \"row\"\n      }, __jsx(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: this.onClickChange\n      }, \"Save\")));\n    }\n  }, {\n    key: \"makePort\",\n    value: function makePort(name, align, spot, output, input) {\n      var horizontal = align.equals(go.Spot.Top) || align.equals(go.Spot.Bottom); // the port is basically just a transparent rectangle that stretches along the side of the node,\n      // and becomes colored when the mouse passes over it\n\n      return $(go.Shape, {\n        fill: \"transparent\",\n        // changed to a color in the mouseEnter event handler\n        strokeWidth: 0,\n        // no stroke\n        width: horizontal ? NaN : 8,\n        // if not stretching horizontally, just 8 wide\n        height: !horizontal ? NaN : 8,\n        // if not stretching vertically, just 8 tall\n        alignment: align,\n        // align the port on the main Shape\n        stretch: horizontal ? go.GraphObject.Horizontal : go.GraphObject.Vertical,\n        portId: name,\n        // declare this object to be a \"port\"\n        fromSpot: spot,\n        // declare where links may connect at this port\n        fromLinkable: output,\n        // declare whether the user may draw links from here\n        toSpot: spot,\n        // declare where links may connect at this port\n        toLinkable: input,\n        // declare whether the user may draw links to here\n        cursor: \"pointer\",\n        // show a different cursor to indicate potential link point\n        mouseEnter: function mouseEnter(e, port) {\n          // the PORT argument will be this Shape\n          if (!e.diagram.isReadOnly) port.fill = \"#00abe469\";\n        },\n        mouseLeave: function mouseLeave(e, port) {\n          port.fill = \"transparent\";\n        }\n      });\n    }\n  }, {\n    key: \"textStyle\",\n    value: function textStyle() {\n      return {\n        font: \"bold 11pt Helvetica, Arial, sans-serif\",\n        margin: 2,\n        stroke: \"whitesmoke\"\n      };\n    }\n  }, {\n    key: \"nodeStyle\",\n    value: function nodeStyle() {\n      return [// The Node.location comes from the \"loc\" property of the node data,\n      // converted by the Point.parse static method.\n      // If the Node.location is changed, it updates the \"loc\" property of the node data,\n      // converting back using the Point.stringify static method.\n      new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\n        // the Node.location is at the center of each node\n        locationSpot: go.Spot.Center\n      }];\n    }\n  }, {\n    key: \"showLinkLabel\",\n    value: function showLinkLabel(e) {\n      var label = e.subject.findObject(\"LABEL\");\n      if (label !== null) label.visible = e.subject.fromNode.data.category === \"Conditional\";\n    }\n  }]);\n\n  return GoJs;\n}(Component);\n\nexport { GoJs as default };","map":{"version":3,"sources":["C:/Users/LENOVO/Documents/teoria/Views/pages/Components/Dfd.jsx"],"names":["React","Component","go","dataModels","$","GraphObject","make","myDiagram","GoJs","props","renderCanvas","bind","state","myModel","Diagram","refs","goJsDiv","showLinkLabel","ToolManager","WheelZoom","nodeTemplateMap","add","Node","nodeStyle","Panel","Shape","Binding","fill","strokeWidth","portId","fromLinkable","toLinkable","TextBlock","textStyle","margin","maxSize","Size","NaN","wrap","WrapFit","editable","makeTwoWay","makePort","Spot","Top","TopSide","Left","LeftSide","Right","RightSide","Bottom","BottomSide","minSize","groupTemplate","Group","resizable","resizeObjectName","name","parse","stringify","Placeholder","padding","alignment","font","Point","fromSpot","toSpot","width","height","text","position","defineFigureGenerator","shape","w","h","geo","Geometry","fig","PathFigure","PathSegment","Line","close","fig2","spot1","spot2","BottomRight","textAlign","stroke","linkTemplate","Link","routing","AvoidsNodes","curve","JumpOver","corner","toShortLength","relinkableFrom","relinkableTo","reshapable","resegmentable","selectionAdorned","isPanelMain","sel","ofObject","toArrow","visible","segmentIndex","segmentFraction","toolManager","linkingTool","temporaryLink","Orthogonal","relinkingTool","Palette","model","GraphLinksModel","modelsData","modelsLinks","prevProps","console","log","toJson","onClickChange","align","spot","output","input","horizontal","equals","stretch","Horizontal","Vertical","cursor","mouseEnter","e","port","diagram","isReadOnly","mouseLeave","locationSpot","Center","label","subject","findObject","fromNode","data","category"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport go from 'gojs';\n//import './App.css';\nimport './figure';\nimport dataModels from './modelsDfg'\nconst $ = go.GraphObject.make;\nvar myDiagram;\nexport default class GoJs extends Component {\n  constructor(props) {\n    super(props);\n    this.renderCanvas = this.renderCanvas.bind(this);\n    this.state = { myModel: null, myDiagram: null }\n  }\n\n  renderCanvas() {\n    myDiagram = $(go.Diagram, this.refs.goJsDiv, {\n      \"LinkDrawn\": this.showLinkLabel,  // this DiagramEvent listener is defined below\n      \"LinkRelinked\": this.showLinkLabel,\n      \"toolManager.mouseWheelBehavior\": go.ToolManager.WheelZoom,\n      \"draggingTool.isGridSnapEnabled\": true,\n      \"undoManager.isEnabled\": true  // enable undo & redo\n    }\n    );\n    // define the Node templates for regular nodes\n    myDiagram.nodeTemplateMap.add(\"\", // the default category\n      $(go.Node, \"Table\", this.nodeStyle(),\n        // the main object is a Panel that surrounds a TextBlock with a rectangular Shape\n        $(go.Panel, \"Auto\",\n          $(go.Shape, \"Rectangle\", new go.Binding(\"fill\", \"color\"),\n            {\n              fill: \"#00A9C9\",\n              strokeWidth: 0,\n              portId: \"\",\n              fromLinkable: true, toLinkable: true\n            },\n            new go.Binding(\"figure\", \"figure\")),\n          $(go.TextBlock, this.textStyle(), {\n            margin: 8,\n            maxSize: new go.Size(160, NaN),\n            wrap: go.TextBlock.WrapFit,\n            editable: true\n          },\n            new go.Binding(\"text\").makeTwoWay())\n        ),\n        // four named ports, one on each side:\n        this.makePort(\"T\", go.Spot.Top, go.Spot.TopSide, false, true),\n        this.makePort(\"L\", go.Spot.Left, go.Spot.LeftSide, true, true),\n        this.makePort(\"R\", go.Spot.Right, go.Spot.RightSide, true, true),\n        this.makePort(\"B\", go.Spot.Bottom, go.Spot.BottomSide, true, false)\n      ));\n    myDiagram.nodeTemplateMap.add(\"Conditional\",\n      $(go.Node, \"Table\", this.nodeStyle(),\n        // the main object is a Panel that surrounds a TextBlock with a rectangular Shape\n        $(go.Panel, \"Auto\",\n          $(go.Shape, \"Diamond\", {\n            fill: \"#00A9C9\",\n            strokeWidth: 0,\n            portId: \"\",\n            fromLinkable: true, toLinkable: true\n          },\n            new go.Binding(\"figure\", \"figure\")),\n          $(go.TextBlock, this.textStyle(), {\n            margin: 8,\n            maxSize: new go.Size(160, NaN),\n            wrap: go.TextBlock.WrapFit,\n            editable: true\n          },\n            new go.Binding(\"text\").makeTwoWay())\n        ),\n        // four named ports, one on each side:\n        this.makePort(\"T\", go.Spot.Top, go.Spot.Top, false, true),\n        this.makePort(\"L\", go.Spot.Left, go.Spot.Left, true, true),\n        this.makePort(\"R\", go.Spot.Right, go.Spot.Right, true, true),\n        this.makePort(\"B\", go.Spot.Bottom, go.Spot.Bottom, true, false)\n      ));\n    myDiagram.nodeTemplateMap.add(\"Start\",\n      $(go.Node, \"Table\", this.nodeStyle(),\n        $(go.Panel, \"Auto\",\n          $(go.Shape, \"Circle\",\n            new go.Binding(\"fill\", \"color\"), {\n            minSize: new go.Size(40, 40),\n            strokeWidth: 0,\n            portId: \"\",\n            fromLinkable: true, toLinkable: true\n          }),\n          $(go.TextBlock, \"Start\", this.textStyle(),\n            new go.Binding(\"text\"))\n        ),\n        // three named ports, one on each side except the top, all output only:\n        /* this.makePort(\"L\", go.Spot.Left, go.Spot.Left, true, false),\n         this.makePort(\"R\", go.Spot.Right, go.Spot.Right, true, false),*/\n        this.makePort(\"B\", go.Spot.Bottom, go.Spot.Bottom, true, false)\n      ));\n    myDiagram.nodeTemplateMap.add(\"Var\",\n      $(go.Node, \"Table\", this.nodeStyle(),\n        $(go.Panel, \"Auto\",\n          $(go.Shape, \"square\",\n            new go.Binding(\"fill\", \"color\"), {\n            minSize: new go.Size(40, 40),\n            strokeWidth: 0,\n            portId: \"\",\n            fromLinkable: true, toLinkable: true\n          }),\n          $(go.TextBlock, this.textStyle(), { editable: true },\n            new go.Binding(\"text\"))\n        ),\n        // three named ports, one on each side except the top, all output only:\n        this.makePort(\"T\", go.Spot.Top, go.Spot.TopSide, false, true),\n        this.makePort(\"L\", go.Spot.Left, go.Spot.LeftSide, true, true),\n        this.makePort(\"R\", go.Spot.Right, go.Spot.RightSide, true, true),\n        this.makePort(\"B\", go.Spot.Bottom, go.Spot.BottomSide, true, false)\n      ));\n\n\n    myDiagram.nodeTemplateMap.add(\"If\",\n      $(go.Node, \"Table\", this.nodeStyle(),\n        $(go.Panel, \"Auto\",\n          $(go.Shape, \"RightTriangle\",\n            new go.Binding(\"fill\", \"color\"), {\n            // angle: 65,\n            // geometryString: \"F M140 0 L70 70 0 50z\",\n            minSize: new go.Size(80, 80),\n            strokeWidth: 0,\n            portId: \"\",\n            fromLinkable: true, toLinkable: true\n          }),\n          $(go.TextBlock, this.textStyle(), { editable: true },\n            new go.Binding(\"text\"))\n        ),\n        // three named ports, one on each side except the top, all output only:\n        this.makePort(\"T\", go.Spot.Top, go.Spot.Top, false, true),\n        this.makePort(\"L\", go.Spot.Left, go.Spot.Left, true, false),\n        this.makePort(\"R\", go.Spot.Right, go.Spot.Right, true, false),\n        this.makePort(\"B\", go.Spot.Bottom, go.Spot.Bottom, true, false)\n      ));\n\n    myDiagram.groupTemplate =\n      $(go.Group, \"Auto\", {\n        resizable: true,\n        resizeObjectName: \"PH\"\n      },\n        $(go.Panel, \"Auto\",\n          $(go.Shape, \"RoundedRectangle\",\n            {\n              fill: \"rgba(128,128,128,0.33)\",\n              name: \"PH\",\n            },\n            new go.Binding(\"desiredSize\", \"size\", go.Size.parse).makeTwoWay(go.Size.stringify)),\n          $(go.Placeholder,    // represents the area of all member parts,\n            { padding: 3 }),\n          $(go.TextBlock, { alignment: go.Spot.Right, font: \"Bold 12pt Sans-Serif\" },\n            new go.Binding(\"text\"))\n        ),\n\n        //three named ports, one on each side except the top, all output only:\n        this.makePort(\"T\", go.Spot.Top, go.Spot.Top, false, true),\n        this.makePort(\"B\", go.Spot.Bottom, go.Spot.Bottom, true, false)\n      );\n\n    myDiagram.nodeTemplateMap.add(\"case\",\n      $(go.Node, \"Table\", this.nodeStyle(), new go.Binding(\"location\", \"loc\", go.Point.parse),\n        $(go.Panel, \"Auto\",\n          $(go.Shape, \"RoundedRectangle\",\n            new go.Binding(\"fill\", \"color\"), {\n            // angle: 65,\n            // geometryString: \"F M140 0 L70 70 0 50z\",\n            //minSize: new go.Size(80, 80),\n            fromSpot: go.Spot.Bottom, toSpot: go.Spot.Top,\n            strokeWidth: 0,\n            portId: \"\",\n            fromLinkable: true, toLinkable: true\n          }),\n          $(go.TextBlock, this.textStyle(), { editable: true },\n            new go.Binding(\"text\"))\n        ),\n        // three named ports, one on each side except the top, all output only:\n        this.makePort(\"T\", go.Spot.Top, go.Spot.Top, false, true),\n        this.makePort(\"L\", go.Spot.Left, go.Spot.Left, true, false),\n        this.makePort(\"R\", go.Spot.Right, go.Spot.Right, true, false),\n        this.makePort(\"B\", go.Spot.Bottom, go.Spot.Bottom, true, false)\n      ));\n\n    myDiagram.nodeTemplateMap.add(\"switch\",\n      $(go.Node, \"Table\", this.nodeStyle(),\n        $(go.Panel, \"Auto\",\n          $(go.Shape, \"octagon\",\n            new go.Binding(\"fill\", \"color\"), {\n            toSpot: go.Spot.Bottom,\n            minSize: new go.Size(80, 80),\n            strokeWidth: 0\n          }),\n          $(go.TextBlock, this.textStyle(), { editable: true },\n            new go.Binding(\"text\"))\n        ),\n        this.makePort(\"B\", go.Spot.Bottom, go.Spot.Bottom, true, false)\n      ));\n\n    myDiagram.nodeTemplateMap.add(\"for\",\n      $(go.Node, \"Spot\",\n        $(go.Shape, \"Rectangle\",\n          {\n            fill: \"\",\n            minSize: new go.Size(140, 40),\n            strokeWidth: 0\n          }),\n        $(go.Shape, \"TriangleLeft\", { width: 20, height: 40, fill: \"black\", alignment: go.Spot.Left }),\n        $(go.Shape, \"Rectangle\", { width: 120, height: 40, fill: \"black\" }),\n        $(go.Shape, \"TriangleRight\", { width: 20, height: 40, fill: \"black\", alignment: go.Spot.Right }),\n        $(go.TextBlock, this.textStyle(), { text: \"Inicio\", font: \"bold 8pt Helvetica, Arial, sans-serif\", position: new go.Point(0, 0) }),\n        $(go.TextBlock, this.textStyle(), { editable: true, text: \"3\", font: \"bold 8pt Helvetica, Arial, sans-serif\", position: new go.Point(200, 0) }),\n        this.makePort(\"B\", go.Spot.Bottom, go.Spot.Bottom, true, false)\n      ));\n    myDiagram.nodeTemplateMap.add(\"End\",\n      $(go.Node, \"Table\", this.nodeStyle(),\n        $(go.Panel, \"Auto\",\n          $(go.Shape, \"Circle\", {\n            minSize: new go.Size(40, 40),\n            fill: \"#DC3C00\",\n            strokeWidth: 0,\n            portId: \"\",\n            fromLinkable: true, toLinkable: true\n          }),\n          $(go.TextBlock, \"End\", this.textStyle(),\n            new go.Binding(\"text\"))\n        ),\n        // three named ports, one on each side except the bottom, all input only:\n        this.makePort(\"T\", go.Spot.Top, go.Spot.Top, false, true),\n        this.makePort(\"L\", go.Spot.Left, go.Spot.Left, false, true),\n        this.makePort(\"R\", go.Spot.Right, go.Spot.Right, false, true)\n      ));\n    // taken from ../extensions/Figures.js:\n    go.Shape.defineFigureGenerator(\"File\", function (shape, w, h) {\n      var geo = new go.Geometry();\n      var fig = new go.PathFigure(0, 0, true); // starting point\n      geo.add(fig);\n      fig.add(new go.PathSegment(go.PathSegment.Line, .75 * w, 0));\n      fig.add(new go.PathSegment(go.PathSegment.Line, w, .25 * h));\n      fig.add(new go.PathSegment(go.PathSegment.Line, w, h));\n      fig.add(new go.PathSegment(go.PathSegment.Line, 0, h).close());\n      var fig2 = new go.PathFigure(.75 * w, 0, false);\n      geo.add(fig2);\n      // The Fold\n      fig2.add(new go.PathSegment(go.PathSegment.Line, .75 * w, .25 * h));\n      fig2.add(new go.PathSegment(go.PathSegment.Line, w, .25 * h));\n      geo.spot1 = new go.Spot(0, .25);\n      geo.spot2 = go.Spot.BottomRight;\n      return geo;\n    });\n    myDiagram.nodeTemplateMap.add(\"Comment\",\n      $(go.Node, \"Auto\", this.nodeStyle(),\n        $(go.Shape, \"File\", {\n          fill: \"#DEE0A3\",\n          strokeWidth: 0,\n          portId: \"\",\n          fromLinkable: true, toLinkable: true\n        }),\n        $(go.TextBlock, this.textStyle(), {\n          margin: 5,\n          maxSize: new go.Size(200, NaN),\n          wrap: go.TextBlock.WrapFit,\n          textAlign: \"center\",\n          editable: true,\n          font: \"bold 12pt Helvetica, Arial, sans-serif\",\n          stroke: '#454545'\n        },\n          new go.Binding(\"text\").makeTwoWay())\n        // no ports, because no links are allowed to connect with a comment\n      ));\n    // replace the default Link template in the linkTemplateMap\n    myDiagram.linkTemplate =\n      $(go.Link, // the whole link panel\n        {\n          routing: go.Link.AvoidsNodes,\n          curve: go.Link.JumpOver,\n          corner: 5,\n          toShortLength: 4,\n          relinkableFrom: true, relinkableTo: true,\n          reshapable: true,\n          resegmentable: true,\n          selectionAdorned: false\n        },\n        new go.Binding(\"points\").makeTwoWay(),\n        $(go.Shape, // the highlight shape, normally transparent\n          {\n            isPanelMain: true,\n            strokeWidth: 8,\n            stroke: \"transparent\",\n\n            name: \"HIGHLIGHT\"\n          }),\n        $(go.Shape, // the link path shape\n          {\n            isPanelMain: true,\n            stroke: \"gray\",\n\n            strokeWidth: 2\n          },\n          new go.Binding(\"stroke\", \"isSelected\", function (sel) {\n            return sel ? \"dodgerblue\" : \"gray\";\n          }).ofObject()),\n        $(go.Shape, // the arrowhead\n          {\n            toArrow: \"standard\",\n            strokeWidth: 0,\n\n            fill: \"gray\"\n          }),\n        $(go.Panel, \"Auto\", // the link label, normally not visible\n          {\n            visible: false,\n            name: \"LABEL\",\n            segmentIndex: 2,\n            segmentFraction: 0.5\n          },\n          new go.Binding(\"visible\", \"visible\").makeTwoWay(),\n          $(go.Shape, \"RoundedRectangle\", // the label shape\n            {\n              fill: \"#F8F8F8\",\n              strokeWidth: 0\n            }),\n          $(go.TextBlock, \"Yes\", // the label\n            {\n              textAlign: \"center\",\n              font: \"10pt helvetica, arial, sans-serif\",\n              stroke: \"#333333\",\n              editable: true\n            },\n            new go.Binding(\"text\").makeTwoWay())\n        )\n      );\n\n    // temporary links used by LinkingTool and RelinkingTool are also orthogonal:\n    myDiagram.toolManager.linkingTool.temporaryLink.routing = go.Link.Orthogonal;\n    myDiagram.toolManager.relinkingTool.temporaryLink.routing = go.Link.Orthogonal;\n\n    // initialize the Palette that is on the left side of the page\n\n    $(go.Palette, \"Diamond\", // must name or refer to the DIV HTML element\n      {\n        nodeTemplateMap: myDiagram.nodeTemplateMap, // share the templates used by myDiagram\n        model: new go.GraphLinksModel(dataModels.modelsData(), dataModels.modelsLinks())\n      });\n\n  }\n\n\n  componentDidMount() {\n    //console.log('componentDidMount')\n    this.renderCanvas();\n  }\n\n\n  componentWillUpdate(prevProps) {\n    /*console.log(JSON.stringify(prevProps, null, 2))\n  if (this.props.data !== prevProps.data) {\n     console.log('Updating 2');\n     const model = this.state.myModel;\n     const diagram = this.state.myDiagram;\n     model.nodeDataArray = this.props.data;\n     diagram.model = model;\n     this.setState({ myModel: model, myDiagram: diagram });\n   }*/\n  }\n  onClickChange() {\n    console.log(myDiagram.model.toJson());\n  }\n  render() {\n    return (\n      <div className='container-fluid'>\n        <div className='row'>\n          <div className='col-md-3' id='Diamond' style={{ 'backgroundColor': '#373737' }}></div>\n          <div className='col-md-9 row'>\n            <div id='blockWhite' ></div>\n            <div ref=\"goJsDiv\" id='goJsDiv' className='col-md-12' style={{ 'width': '500px', 'height': '700px', 'backgroundColor': '#373737' }}>\n            </div>\n          </div>\n        </div>\n        <div className='row'>\n          <button className='btn btn-primary' onClick={this.onClickChange}>Save</button>\n        </div>\n      </div>\n    )\n  }\n\n\n  makePort(name, align, spot, output, input) {\n    var horizontal = align.equals(go.Spot.Top) || align.equals(go.Spot.Bottom);\n    // the port is basically just a transparent rectangle that stretches along the side of the node,\n    // and becomes colored when the mouse passes over it\n    return $(go.Shape, {\n      fill: \"transparent\", // changed to a color in the mouseEnter event handler\n      strokeWidth: 0, // no stroke\n      width: horizontal ? NaN : 8, // if not stretching horizontally, just 8 wide\n      height: !horizontal ? NaN : 8, // if not stretching vertically, just 8 tall\n      alignment: align, // align the port on the main Shape\n      stretch: (horizontal ? go.GraphObject.Horizontal : go.GraphObject.Vertical),\n      portId: name, // declare this object to be a \"port\"\n      fromSpot: spot, // declare where links may connect at this port\n      fromLinkable: output, // declare whether the user may draw links from here\n      toSpot: spot, // declare where links may connect at this port\n      toLinkable: input, // declare whether the user may draw links to here\n      cursor: \"pointer\", // show a different cursor to indicate potential link point\n\n      mouseEnter: function (e, port) { // the PORT argument will be this Shape\n        if (!e.diagram.isReadOnly) port.fill = \"#00abe469\";\n      },\n      mouseLeave: function (e, port) {\n        port.fill = \"transparent\";\n      }\n    });\n  }\n\n\n  textStyle() {\n    return {\n      font: \"bold 11pt Helvetica, Arial, sans-serif\",\n      margin: 2,\n      stroke: \"whitesmoke\"\n    }\n  }\n\n  nodeStyle() {\n    return [\n      // The Node.location comes from the \"loc\" property of the node data,\n      // converted by the Point.parse static method.\n      // If the Node.location is changed, it updates the \"loc\" property of the node data,\n      // converting back using the Point.stringify static method.\n      new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\n        // the Node.location is at the center of each node\n        locationSpot: go.Spot.Center\n      }\n    ];\n  }\n\n  showLinkLabel(e) {\n    var label = e.subject.findObject(\"LABEL\");\n    if (label !== null) label.visible = (e.subject.fromNode.data.category === \"Conditional\");\n  }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}