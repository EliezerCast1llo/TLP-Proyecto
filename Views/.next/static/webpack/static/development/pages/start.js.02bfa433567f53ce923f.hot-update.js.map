{"version":3,"file":"static/webpack/static\\development\\pages\\start.js.02bfa433567f53ce923f.hot-update.js","sources":["webpack:///./pages/Components/functionsDfd.js"],"sourcesContent":["import go from 'gojs';\r\nconst $ = go.GraphObject.make;\r\n\r\nfunction linkTemplate() {\r\n    let template = $(go.Link, // the whole link panel\r\n        {\r\n            routing: go.Link.AvoidsNodes,\r\n            curve: go.Link.JumpOver,\r\n            corner: 5,\r\n            toShortLength: 4,\r\n            relinkableFrom: true, relinkableTo: true,\r\n            reshapable: true,\r\n            resegmentable: true,\r\n            selectionAdorned: false\r\n        },\r\n        new go.Binding(\"points\").makeTwoWay(),\r\n        $(go.Shape, // the highlight shape, normally transparent\r\n            {\r\n                isPanelMain: true,\r\n                strokeWidth: 8,\r\n                stroke: \"transparent\",\r\n\r\n                name: \"HIGHLIGHT\"\r\n            }),\r\n        $(go.Shape, // the link path shape\r\n            {\r\n                isPanelMain: true,\r\n                stroke: \"gray\",\r\n\r\n                strokeWidth: 2\r\n            },\r\n            new go.Binding(\"stroke\", \"isSelected\", function (sel) {\r\n                return sel ? \"dodgerblue\" : \"gray\";\r\n            }).ofObject()),\r\n        $(go.Shape, // the arrowhead\r\n            {\r\n                toArrow: \"standard\",\r\n                strokeWidth: 0,\r\n\r\n                fill: \"gray\"\r\n            }),\r\n        $(go.Panel, \"Auto\", // the link label, normally not visible\r\n            {\r\n                visible: false,\r\n                name: \"LABEL\",\r\n                segmentIndex: 2,\r\n                segmentFraction: 0.5\r\n            },\r\n            new go.Binding(\"visible\", \"visible\").makeTwoWay(),\r\n            $(go.Shape, \"RoundedRectangle\", // the label shape\r\n                {\r\n                    fill: \"#F8F8F8\",\r\n                    strokeWidth: 0\r\n                }),\r\n            $(go.TextBlock, \"Yes\", // the label\r\n                {\r\n                    textAlign: \"center\",\r\n                    font: \"10pt helvetica, arial, sans-serif\",\r\n                    stroke: \"#333333\",\r\n                    editable: true\r\n                },\r\n                new go.Binding(\"text\").makeTwoWay())\r\n        )\r\n    );\r\n    return template;\r\n}\r\n\r\nfunction makePort(name, align, spot, output, input) {\r\n    var horizontal = align.equals(go.Spot.Top) || align.equals(go.Spot.Bottom);\r\n    // the port is basically just a transparent rectangle that stretches along the side of the node,\r\n    // and becomes colored when the mouse passes over it\r\n    return $(go.Shape, {\r\n        fill: \"transparent\", // changed to a color in the mouseEnter event handler\r\n        strokeWidth: 0, // no stroke\r\n        width: horizontal ? NaN : 8, // if not stretching horizontally, just 8 wide\r\n        height: !horizontal ? NaN : 8, // if not stretching vertically, just 8 tall\r\n        alignment: align, // align the port on the main Shape\r\n        stretch: (horizontal ? go.GraphObject.Horizontal : go.GraphObject.Vertical),\r\n        portId: name, // declare this object to be a \"port\"\r\n        fromSpot: spot, // declare where links may connect at this port\r\n        fromLinkable: output, // declare whether the user may draw links from here\r\n        toSpot: spot, // declare where links may connect at this port\r\n        toLinkable: input, // declare whether the user may draw links to here\r\n        cursor: \"pointer\", // show a different cursor to indicate potential link point\r\n\r\n        mouseEnter: function (e, port) { // the PORT argument will be this Shape\r\n            if (!e.diagram.isReadOnly) port.fill = \"#00abe469\";\r\n        },\r\n        mouseLeave: function (e, port) {\r\n            port.fill = \"transparent\";\r\n        }\r\n    });\r\n}\r\n\r\n\r\nfunction showLinkLabel(e) {\r\n    var label = e.subject.findObject(\"LABEL\");\r\n    if (label !== null) label.visible = (e.subject.fromNode.data.category === \"Conditional\");\r\n}\r\nmodule.exports = { linkTemplate, makePort, showLinkLabel }"],"mappings":";;;;;;;;;;;;;;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AARA;AAYA;AACA;AACA;AACA;AAEA;AALA;AAQA;AACA;AACA;AAEA;AAJA;AAOA;AACA;AAEA;AACA;AACA;AAEA;AAJA;AAOA;AACA;AACA;AACA;AACA;AAJA;AAQA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AAJA;AASA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAqBA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}